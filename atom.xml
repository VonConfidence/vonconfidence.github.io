<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://https://y857p8.coding-pages.com</id>
    <title>我的fe生涯</title>
    <updated>2020-02-22T09:01:31.785Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://https://y857p8.coding-pages.com"/>
    <link rel="self" href="https://https://y857p8.coding-pages.com/atom.xml"/>
    <subtitle>前端萌新</subtitle>
    <logo>https://https://y857p8.coding-pages.com/images/avatar.png</logo>
    <icon>https://https://y857p8.coding-pages.com/favicon.ico</icon>
    <rights>All rights reserved 2020, 我的fe生涯</rights>
    <entry>
        <title type="html"><![CDATA[Set WeakSet Map WeakMap 探讨]]></title>
        <id>https://https://y857p8.coding-pages.com/post/set-weakset-map-weakmap/</id>
        <link href="https://https://y857p8.coding-pages.com/post/set-weakset-map-weakmap/">
        </link>
        <updated>2020-02-21T18:14:54.000Z</updated>
        <content type="html"><![CDATA[<h4 id="set-weakset">Set &amp; WeakSet</h4>
<blockquote>
<p>类似于数组, 成员唯一且无序, 没有重复值</p>
</blockquote>
<ol>
<li>
<p>set.add(val)</p>
<ul>
<li>向set中添加值的时候, 不会发生类型转换, 使用精确相等===, 区别是NaN等于自身无法重复添加</li>
</ul>
</li>
<li>
<p>WeakSet 对象允许将<strong>弱引用对象</strong>存储在集合中, 与Set的区别</p>
<ul>
<li>WeakSet只能存储对象引用, 不能存放值, 而Set对象可以</li>
<li>WeakSet中存储的对象值, 垃圾回收机制不会考虑WeakSet对该值的引用, 如果该对象没有被其他变量或者属性引用, 那么该对象就会被垃圾回收机制回收掉, 此时WeakSet中也会没有该对象, 所以WeakSet中有多少个成员格式可能不一致, 取决于垃圾回收机制有没有运行, 运行前后的成员个数可能不一致</li>
<li>基于上述, WeakSet不能获取size和不能遍历, 同时clear()方法也废弃了</li>
</ul>
<pre><code class="language-js">var ws = new WeakSet();
var obj = { o: '1' };
var foo = { bar: 1 };

ws.add(window);
window.obj = obj;

ws.add(obj);

ws.has(window); // true
ws.has(foo);   // 因为没有被用到, 被垃圾回收机制回收了, false
ws.has(obj);   // 被window引用了, 没有被垃圾回收, true

ws.delete(window); // true
ws.has(window);    // false
</code></pre>
</li>
</ol>
<h4 id="map-hashmap">Map &amp; HashMap</h4>
<ol>
<li>
<p>map与set的区别</p>
<ul>
<li>共同点:
<ul>
<li>set, Map可以存储不重复的值</li>
<li>都可以遍历, 有iterator接口</li>
</ul>
</li>
<li>不同点:
<ul>
<li>set是以[value1, value2] 的形式存储, map是以 [[key,value]]的形式存储</li>
</ul>
</li>
</ul>
</li>
<li>
<p>WeakMap</p>
<ul>
<li>WeakMap实例是一组键值对的集合, 键是弱引用<strong>对象</strong>, 而值可以是任意, <strong>WeakMap弱引用的只是键名key, 而不是键值</strong></li>
<li>键名是弱引用对象, 所以WeakMap同样不能遍历</li>
</ul>
</li>
<li>
<p>Object与Map</p>
<ul>
<li>对象的键值类型只能是字符串, 而Map则提供了任意类型的键值对应关系</li>
</ul>
</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Gridea 搭建自己的博客系统]]></title>
        <id>https://https://y857p8.coding-pages.com/post/learnGridea/</id>
        <link href="https://https://y857p8.coding-pages.com/post/learnGridea/">
        </link>
        <updated>2020-02-21T16:00:00.000Z</updated>
        <content type="html"><![CDATA[<h3 id="gridea-搭建自己的博客系统">Gridea 搭建自己的博客系统</h3>
<ol>
<li>
<p>Github创建仓库</p>
<ul>
<li>仓库名称设置为 <strong>账号名称.github.io</strong></li>
<li>选择创建空仓库</li>
<li><a href="https://gridea.dev/#started">安装gridea</a></li>
</ul>
</li>
<li>
<p>gridea配置<br>
<img src="https://https://y857p8.coding-pages.com/post-images/1582305244298.png" alt="gridea" loading="lazy"></p>
<ul>
<li>域名: Github Pages 对应的域名 如 https://vonconfidence.github.io 或者 confidence.fe</li>
<li>仓库: 你的静态文件存放地址, 例如 <strong>账号名称.github.io</strong> (填写上面建立的仓库名称)</li>
<li>分支: Github Pages对应的分支 (例如master)</li>
<li>邮箱: 注册github时使用的邮箱</li>
<li>token: git推送时需要使用的token, 用来向 Github 提交构建后的文件 <a href="https://link.zhihu.com/?target=https%3A//github.com/settings/tokens">Github personal access tokens</a>
<ul>
<li>建立你自己的 Personal access tokens 的时候，建议你只需要赋予 repo 的权利就可以了，这样可以减少你的 Token 出现泄漏后可能造成的风险</li>
</ul>
</li>
</ul>
<figure data-type="image" tabindex="1"><img src="https://https://y857p8.coding-pages.com/post-images/1582305613339.jpg" alt="accessToken" loading="lazy"></figure>
</li>
<li>
<p>配置好了，检测远程连接没有问题之后，Gridea 就成功和你的 Github Pages 连接了。</p>
</li>
<li>
<p>重新回到主界面，点击左下角的同步，就可以将你的文章同步到你的个人 Blog 了，你可以访问<strong>账号名称.github.io</strong> 来看效果。</p>
</li>
</ol>
<h4 id="熟悉操作">熟悉操作</h4>
<ol>
<li>
<p>菜单栏目</p>
<p>菜单会在网页上标题下方显示，初始状态有四个菜单：首页、归档、标签、关于，在网页里可以找到他们的作用。<br>
<img src="https://https://y857p8.coding-pages.com/post-images/1582306079380.png" alt="" loading="lazy"></p>
</li>
<li>
<p>标签栏目</p>
<ul>
<li>标签栏目用于管理文章的标签。新建文章时直接在文章栏目添加即可，不必手动添加。</li>
<li>当一个标签下没有文章时，标签不会自动移除，会出现删除选项，手动移除。</li>
</ul>
</li>
<li>
<p>主题栏目</p>
<ul>
<li>主题栏目主要是网站的设计。</li>
<li>基础配置界面是关于网站样式的设计。默认含有四个主题，可前往官网预览，可以在这里下载其他主题。</li>
</ul>
</li>
<li>
<p>远程栏目<br>
项目推送到远程的配置</p>
</li>
</ol>
<h4 id="参考">参考</h4>
<ol>
<li>https://zhuanlan.zhihu.com/p/64034679</li>
</ol>
]]></content>
    </entry>
</feed>